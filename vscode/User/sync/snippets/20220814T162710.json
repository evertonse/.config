{"version":1,"content":"{\"c.json\":\"{\\n\\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"inverted for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"forr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int i = length - 1; i >= 0; i--)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"inverted for\\\"\\n\\t},\\n\\t\\\"normal for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"for\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int i = 0; i < length; i++)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"normal for\\\"\\n\\t},\\n\\t\\\"switch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch-brackets\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"switch (/*variable*/)\\\",\\n\\t\\t\\\"{\\\",\\n\\t\\t\\\"\\\\tcase /*case1*/$0:\\\",\\n\\t\\t\\\"\\\\t{\\\",\\t\\n\\t\\t\\\"\\\\t\\\\tbreak;\\\",\\n\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\\"\\\\tdefault:\\\",\\n\\t\\t\\\"\\\\t{\\\",\\n\\t\\t\\\"\\\\t\\\\tbreak;\\\",\\n\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"switch with brackets\\\"\\n\\t},\\n}\",\"cpp.json\":\"{\\n\\t// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"inverted for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"forr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int i = length - 1; i >= 0; i--)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"inverted for\\\"\\n\\t},\\n\\t\\\"normal for\\\": {\\n\\t\\t\\\"prefix\\\": \\\"for\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for (int i = 0; i < length; i++)\\\",\\n\\t\\t\\t\\\"{\\\",\\n\\t\\t\\t\\\"$0\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"$2\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"normal for\\\"\\n\\t},\\n\\t\\\"switch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch-brackets\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"switch (/*variable*/)\\\",\\n\\t\\t\\\"{\\\",\\n\\t\\t\\\"\\\\tcase /*case1*/$0:\\\",\\n\\t\\t\\\"\\\\t{\\\",\\t\\n\\t\\t\\\"\\\\t\\\\tbreak;\\\",\\n\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\\"\\\\tdefault:\\\",\\n\\t\\t\\\"\\\\t{\\\",\\n\\t\\t\\\"\\\\t\\\\tbreak;\\\",\\n\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"switch with brackets\\\"\\n\\t},\\n\\t\\\"rangefor\\\": {\\n\\t\\t\\\"prefix\\\": \\\"rfor\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"for (auto& item : v) {\\\",\\n\\t\\t\\\"\\\\t $0\\\",\\n\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"range for\\\"\\n\\t},\\n\\t\\\"iterfor\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ifor\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"for (it = vec.begin(); it != vec.end(); ++it) {\\\",\\n\\t\\t\\\"\\\\tint& n = *it;\\\",\\n\\t\\t\\\"\\\\ttotal += n;\\\",\\n\\t\\t\\\"}\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"iter range for unsugarfied\\\"\\n\\t},\\n\\t\\\"cout\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cout\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"std::cout << $0 << '\\\\n';\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"\\\\\\\\n terminated cout\\\"\\n\\t},\\n\\n\\t\\\"template\\\": {\\n\\t\\t\\\"prefix\\\": \\\"template\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\\"template<typename T>\\\\n\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Template with type T\\\"\\n\\t},\\n}\",\"python.json\":\"{\\n\\t// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Main function\\\": {\\n\\t\\t\\\"prefix\\\": \\\"__main__\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"def __main__():\\\",\\n\\t\\t\\t\\\"\\\\tpass$0\\\\n\\\",\\n\\t\\t\\t\\\"if __name__ == '__main__':\\\",\\n\\t\\t\\t\\\"\\\\t__main__()\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"create main function .py\\\"\\n\\t},\\n\\t\\\"Init method\\\": {\\n\\t\\t\\\"prefix\\\": \\\"__init__\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"def __init__(self, $0):\\\",\\n\\t\\t\\t\\\"\\\\tpass\\\\n\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"create __init__ method .py\\\"\\n\\t},\\n\\t\\\"printf\\\": {\\n\\t\\t\\\"prefix\\\": \\\"printf\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"print(f'{$0=}')\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"create a formated print for python\\\"\\n\\t}\\n\\t\\n}\",\"yaml.json\":\"{\\n\\t// Place your snippets for yaml here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\"}"}