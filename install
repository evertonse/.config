#!/usr/bin/python4

import sys
import os
from pathlib import Path
from shutil import copytree, rmtree as rmdir, copy as cpfile, move as mv
from glob import glob
from functools import partial

def getch(x):
    import termios, sys , tty
    print(x)
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)     #This number represents the length
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

cpdir = partial(copytree, dirs_exist_ok=True)


def cp(src, dst):
    print(f"src={Path(src)} dst={Path(dst)}")
    if src.is_dir():
        cpdir(Path(src), Path(dst))
    else:
        cpfile(Path(src), Path(dst))


home = Path.home()
installs = ["dotfiles", "dotdirs", "dotrepos"]
cmd = lambda x: getch(f'{x} [y/n]?').lower() == 'y' and os.system(x)



def remove_neovim():
    cmd(f'rm -rf {home}/.config/nvim')
    cmd(f'rm -rf {home}/.local/state/nvim')
    cmd(f'rm -rf {home}/.local/share/nvim')

def install_neovim():
    cmd(f'git clone https://github.com/evertonse/kickstart.nvim.git {home}/.config/nvim')
    
def dotdirs():
    dirs = [
        *glob("./config/*"),
        *glob("./local/*"),
    ]

    links = {
        # NOTE: Every path is relative to $HOME/.config
        (f"{home}/.config/kitty.0/", f"{home}/.config/kitty"),
        (f"{home}/.config/eww.XX/", f"{home}/.config/eww"),
        (f"{home}/.config/waybar.Zanius/", f"{home}/.config/waybar"),
        (f"{home}/.config/rofi.titus/", f"{home}/.config/rofi"),
        (f"{home}/.config/zsh/zshrc", f"{home}/.zshrc"),
        (f"{home}/.config/zsh/zshrc", f"{home}/.config/zsh/.zshrc"),
    }

    copies = {
        # (f"{home}/.config/zsh/zshrc", f"{home}/.zshrc"),
    }

    for file in dirs:
        src = Path(file)
        dst = Path(home, f".{src}")
        if (
            autoyes
            or input(
                f"About to copy and overwrite src={file} into dest={Path(home,file)} [y/n]?"
            ).lower()
            == "y"
        ):
            # We put a dot '.' in front because we preserver the name config
            # but programs expect .config, got it?
            cp(src, dst)

    # cmd(f'sudo cp -rf ./config {Path(home, '.config')}')

    print(f">>--------Links--------\n")
    for src, dst in links:
        src = Path(src)
        dst = Path(dst)
        cmd(f"sudo rm -rf {dst} || rm -f {dst}")
        cmd(f"ln -sf {src} {dst}")
    print(f"<<--------Links--------\n")

    print(f">>--------Copies--------\n")
    for src, dst in copies:
        src = Path(src)
        dst = Path(dst)
        cmd(f"sudo rm -rf {dst} || rm -f {dst}")
        cp(src, dst)
    print(f"<<--------Copies--------\n")

    cmd(f"sudo ln -sf {home}/.local/include/* /usr/include")
    cmd(f"sudo cp -rf ./.config/X11/xorg.conf.d/ /etc/X11/")
    cmd(f"sudo ln -sf {home}/.local/include/* /usr/include")
    cmd(
        f"sudo ln -s  {home}/.config/X11/xkb/symbols/br-excyber /usr/share/X11/xkb/symbols/br-excyber"
    )
    # cmd(f'setxkbmap -model br-abnt2 -layout br -option ""')
    # cmd('setxkbmap -model br-abnt2-excyber -layout br-excyber -option ""')
    # cmd(
    #     f"xkbcomp -w0 -I$HOME/.config/X11/xkb/ {home}/.config/X11/xkb/keymap/excyber-keymap $DISPLAY"
    # )
    cmd(f"chmod +x {home}/.local/bin/*")
    cmd(
        f"ln -sf {home}/.config/picom/picom.jonaburg.conf {home}/.config/picom/picom.conf"
    )


def dotrepos():
    remove_neovim()
    install_neovim()

    rocks = Path(home, "code", "rocks")
    cmd(
        f"git clone https://github.com/evertonse/rocks {rocks} && cd {rocks} && ./install.sh"
    )
    path = Path(home, "code", "dwm-flexipatch")
    cmd(
        f"git clone https://github.com/evertonse/dwm-flexipatch {path} && cd {path} && sudo make install"
    )


# def neovim():
#     neovim_path = Path(home,'code','neovim')
#     neovim_path.mkdir(parents=True, exist_ok=True)
#     if neovim_path.is_dir():
#         rmdir(neovim_path)
#     cmd(f"git clone  https://github.com/neovim/neovim {neovim_path}")
#     cmd(f"cd {neovim_path}")
#     cmd(f"make CMAKE_BUILD_TYPE=RelWithDebInfo && sudo make install")


def dotfiles():
    files = [
        *glob("./.*"),
        "./pacman.conf",
        "./.gitconfig",
    ]

    for f in files:
        if f == "./pacman.conf":
            cmd(f"sudo cp {Path(f)} {Path('/etc', 'pacman.conf')}")
            continue
        if f == "./grub":
            cmd(f"sudo cp {Path(f)} {Path('/etc', 'default', 'grub')}")
            print(
                " to ensure the grub config is set use 'sudo grub-mkconfig -o /boot/grub/grub.cfg'"
            )
            continue

        f = Path(f)
        if f.is_dir():
            continue

        if (
            autoyes
            or input(
                # f'for sure this is not a dir isit : {f.is_dir()}'
                # +
                f"About to copy and overwrite src={f} into dest={Path(home,f)} [y/n]?"
            ).lower()
            == "y"
        ):
            cp(f, Path(home, f))


autoyes = False


def main():
    global autoyes
    argc = len(sys.argv)
    if argc > 1 and sys.argv[1].lower() == "-y":
        print("Chose -y, will not prompt and will override config ")
        autoyes = True

    if os.name == "nt":
        print("Windows not supported for automatically install")
        exit(69)

    print("Which one do you wish to install ? ")
    for key, value in enumerate(installs):
        print(f"{key+1} : {value}")
    which = installs[int(input()) - 1]

    if which == "dotdirs":
        dotdirs()
    elif which == "dotfiles":
        dotfiles()
    elif which == "dotrepos":
        dotrepos()


if __name__ == "__main__":
    main()
