# set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
background = "#232323"
C-down
C-k
# Bind Ctrl+J to navigate down the command history
bind -n C-j send-keys C-down
# Bind Ctrl+K to navigate up the command history
bind -n C-k send-keys C-up
n
p
-
d
a
d
C-j
bind -n C-j send-keys down
# Bind Ctrl+K to navigate up the command history
bind -n C-k send-keys up
# Bind Ctrl+J to navigate down the command history
bind -n C-j send-keys Down
# Bind Ctrl+K to navigate up the command history
bind -n C-k send-keys Up
-T
bind-key -T command_mode C-j command-prompt -p ':' "send-keys Up"
bind-key -T command_mode C-k command-prompt -p ':' "send-keys Down"
[[ -z $DISPLAY ]] && source ~/.config/shell/startup.sh &
[[ -z $DISPLAY ]] && source ~/.config/shell/startup.sh &
[[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]] &&  exec $WM_EXEC &> /dev/null
&> /dev/null
[[ -z $DISPLAY ]] && source ~/.config/shell/startup.sh &> ~/startup.log
[[ -z $DISPLAY ]] && source ~/.config/shell/startup.sh &> ~/startup.log
~/.local/share
function
function
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_line 'Y'
set -g @yank_pane_pwd 'y'
set -g @copy_mode_yank 'y'
set -g @copy_mode_put 'p'
set -g @copy_mode_yank_put 'P'
set -g @copy_mode_yank_wo_newline 'M-y'
set -g @shell_mode 'vi'
set -g @plugin 'tmux-plugins/tmux-yank'
####################################################
## Yank
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_line 'Y'
set -g @yank_pane_pwd 'y'
set -g @copy_mode_yank 'y'
set -g @copy_mode_put 'p'
set -g @copy_mode_yank_put 'P'
set -g @copy_mode_yank_wo_newline 'M-y'
set -g @shell_mode 'vi'
####################################################
#<<--------------PLUGINS CONFIG------------------#
#--------------------------------------------------------------#
#----------------------COPY-VI---------------------------------#
#--------------------------------------------------------------#
# ```
# https://www.reddit.com/r/tmux/comments/v73005/how_to_prevent_tmux_from_exiting_copy_mode_after/:
# So I was having trouble too and got it to work by adding the command after my run tpm command: run '~/.tmux/plugins/tpm/tpm'
# Seems like one of the plugins was causing the bind-key command to get overwritten.
# ```
# set vi mode for copy mode
set -g mode-keys vi
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
# copy mode using 'Esc'
unbind [
bind Escape copy-mode
# in copy-mode use 'v' to start selecting like vim visual mode
bind -T copy-mode-vi y                 send-keys -X   copy-selection -x
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X   copy-selection -x
bind -T copy-mode-vi Escape            send-keys -X   cancel
bind -T copy-mode-vi C-c               send-keys -X   cancel
bind -T copy-mode-vi q                 send-keys -X   cancel
bind -T copy-mode-vi v                 send-keys -X   begin-selection
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"`
#--------------------------------------------------------------#
#--------------------------------------------------------------#
set -g @copy_mode_yank 'y'
# set vi mode for copy mode
set -g mode-keys vi
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
# copy mode using 'Esc'
unbind [
bind Escape copy-mode
# in copy-mode use 'v' to start selecting like vim visual mode
bind -T copy-mode-vi y                 send-keys -X   copy-selection -x
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X   copy-selection -x
bind -T copy-mode-vi Escape            send-keys -X   cancel
bind -T copy-mode-vi C-c               send-keys -X   cancel
bind -T copy-mode-vi q                 send-keys -X   cancel
bind -T copy-mode-vi v                 send-keys -X   begin-selection
# set vi mode for copy mode
set -g mode-keys vi
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection
# copy mode using 'Esc'
unbind [
bind Escape copy-mode
# in copy-mode use 'v' to start selecting like vim visual mode
bind -T copy-mode-vi y                 send-keys -X   copy-selection -x
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X   copy-selection -x
bind -T copy-mode-vi Escape            send-keys -X   cancel
bind -T copy-mode-vi C-c               send-keys -X   cancel
bind -T copy-mode-vi q                 send-keys -X   cancel
bind -T copy-mode-vi v                 send-keys -X   begin-selection
#<<--------------PLUGINS CONFIG------------------#
#Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
run-shell "echo hahah#{pane-bg}
set-hook -g session-closed "switch-client -l"
run-shell "echo hahah#{pane-bg}
switch-client
switch-client -p
switch-client -p
&
# set-hook -g pane-focus-in 'run-shell "echo hahah#{pane-bg}"'
tmux a >> ~/tmux/tmux.log
tmux a >> ~/tmux/tmux.log
tmux
off
off
on
on
off
off
on
on
off
off
on
on
set-hook -g session-closed 'run-shell "tmux a &>  /dev/null"'
# set-hook -g session-closed "switch-client -n"
t
 
false
false
autoMemoryReclaim="gradual"
# Automatically mount Windows drive when the distribution is launched
[automount]
# Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won't be mounted automatically, but need to be mounted manually or with fstab.
enabled = true
[wsl2]
memory=20GB
processors=8
guiApplications=true
nestedVirtualization = true
[boot]
systemd=true
# Set whether WSL supports interop processes like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.
[interop]
enabled = true
appendWindowsPath = true
[experimental]
autoMemoryReclaim="gradual"
appendWindowsPath = true
[boot]
systemd=true
[automount]
enabled = true
options = "metadata"
mountFsTab = true
# Set whether WSL supports interop processes like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.
[interop]
enabled = true
appendWindowsPath = true
    export WIN_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r\n')
%UserProfile%
WIN_USERPROFILE
WIN_USERPROFILE
%UserProfile%
WIN_USERPROFILE
WIN_USERPROFILE
![](assets/alternatives.png)
- 
ntar
    c
f
BIG_YES
if
BIG_YES
BIG_YES
        BIG_YES = BIG_YES
    global
BIG_YES
BIG_YES = False
def yes_or_no(x, BIG_YES=False) -> bool:
def yes_or_no(x, BIG_YES=False) -> bool:
    if BIG_YES == True:
        return BIG_YES
    phrase = f"{x} [y/n]?"
    c = getch(phrase).lower()
    while c not in {"y", "n", "yes", "no"}:
        c = getch(phrase).lower()
    BIG_YES = c.startswith("y")
    return BIG_YES
        return BIG_YES
    phrase = f"{x} [y/n]?"
    c = getch(phrase).lower()
    while c not in {"y", "n", "yes", "no"}:
        c = getch(phrase).lower()
    BIG_YES = c.startswith("y")
    return BIG_YES
    if BIG_YES == True:
BIG_YES=False
BIG_YES
def yes_or_no(x) -> bool:
    BIG_YES = False
    def internal_yes_or_no(x, BIG_YES=False) -> bool:
        nonlocal BIG_YES
        if BIG_YES == True:
            return BIG_YES
        phrase = f"{x} [y/n]?"
        c = getch(phrase).lower()
        while c not in {"y", "n", "yes", "no"}:
            c = getch(phrase).lower()
        BIG_YES = c.startswith("y")
        return BIG_YES
    return internal_yes_or_no(x)
def yes_or_no(x) -> bool:
    BIG_YES = False
    def internal_yes_or_no(x, BIG_YES=False) -> bool:
        nonlocal BIG_YES
        if BIG_YES == True:
            return BIG_YES
        phrase = f"{x} [y/n]?"
        c = getch(phrase).lower()
        while c not in {"y", "n", "yes", "no"}:
            c = getch(phrase).lower()
        BIG_YES = c.startswith("y")
        return BIG_YES
    return internal_yes_or_no(x)
def yes_or_no(x) -> bool:
def yes_or_no(x) -> bool:
def yes_or_no(x) -> bool:
    BIG_YES = False
    def internal_yes_or_no(x, BIG_YES=False) -> bool:
        nonlocal BIG_YES
        if BIG_YES == True:
            return BIG_YES
        phrase = f"{x} [y/n]?"
        c = getch(phrase).lower()
        while c not in {"y", "n", "yes", "no"}:
            c = getch(phrase).lower()
        BIG_YES = c.startswith("y")
        return BIG_YES
    return internal_yes_or_no(x)
yes_or_no
yes_or_no(True)
yes_or_no(True)
True
yes_or_no(False)
y
y
y
)
)
'
('0x18', '0x1f', '0x12')
background = "#201817"
f
foreground = "#d8d8d8"
0xa5
foreground = "#a58e7e"
7e
foreground = "#a58e7e"
#e3e0dd
#a58e7e
5
foreground
0
9
7
6
[automount]
enabled = true
mountFsTab = true
options = "metadata"
            cmd(f"sudo cp {Path(f)} {Path('/etc', 'pacman.conf')}")
        cmd
        
f
"
"
'wsl.conf'
Bash
Copy
    alias explorer='explorer.exe'
explorer.exe `wslpath -w "$PWD"`
'explorer.exe'
sudo echo 0 > /proc/sys/fs/binfmt_misc/WSLInterop
    sudo echo 0 sudo > /proc/sys/fs/binfmt_misc/WSLInterop
sudo 
sudo
set breakpoint pending on
set disassembly-flavor intel
